# Generated by Django 5.1.1 on 2025-03-13 21:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('DISCARDED', 'Discarded'), ('PENDING', 'Pending'), ('REVIEWED', 'Reviewed'), ('IN_PRODUCTION', 'In Production')], default='PENDING', max_length=20)),
                ('site_types', models.CharField(choices=[('PLACE', 'Place'), ('EVENT', 'Event')], default='PLACE', max_length=20)),
                ('project_id', models.UUIDField(editable=False)),
                ('project_title', models.CharField(max_length=255)),
                ('level', models.CharField(blank=True, max_length=255, null=True)),
                ('translated_level', models.CharField(blank=True, max_length=255, null=True)),
                ('main_category', models.CharField(blank=True, max_length=500, null=True)),
                ('translated_main_category', models.CharField(blank=True, max_length=500, null=True)),
                ('tailored_category', models.CharField(blank=True, max_length=500, null=True)),
                ('translated_tailored_category', models.CharField(blank=True, max_length=500, null=True)),
                ('search_string', models.CharField(max_length=255)),
                ('rank', models.IntegerField(default=0)),
                ('search_page_url', models.URLField(blank=True, max_length=500, null=True)),
                ('is_advertisement', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=255)),
                ('translated_title', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('translated_description', models.TextField(blank=True, null=True)),
                ('price', models.CharField(blank=True, max_length=50, null=True)),
                ('category_name', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=100, null=True)),
                ('street', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('form_country_id', models.IntegerField(blank=True, null=True)),
                ('form_country_name', models.CharField(blank=True, max_length=255, null=True)),
                ('form_destination_id', models.IntegerField(blank=True, null=True)),
                ('form_destination_name', models.CharField(blank=True, max_length=255, null=True)),
                ('country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('place_id', models.CharField(max_length=255, unique=True)),
                ('data_id', models.CharField(blank=True, max_length=255, null=True)),
                ('data_cid', models.CharField(blank=True, max_length=255, null=True)),
                ('reviews_count', models.PositiveIntegerField(default=0)),
                ('rating', models.FloatField(blank=True, null=True)),
                ('scraped_at', models.DateTimeField(verbose_name='gathered_at')),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('website', models.URLField(blank=True, max_length=500, null=True)),
                ('thumbnail', models.URLField(blank=True, max_length=500, null=True)),
                ('types', models.TextField(blank=True, null=True)),
                ('operating_hours', models.JSONField(blank=True, null=True)),
                ('service_options', models.JSONField(blank=True, null=True)),
                ('title_esp', models.CharField(blank=True, max_length=500, null=True)),
                ('title_fr', models.CharField(blank=True, max_length=500, null=True)),
                ('title_eng', models.CharField(blank=True, max_length=500, null=True)),
                ('description_esp', models.TextField(blank=True, null=True)),
                ('description_eng', models.TextField(blank=True, null=True)),
                ('description_fr', models.TextField(blank=True, null=True)),
                ('types_esp', models.TextField(blank=True, null=True)),
                ('types_eng', models.TextField(blank=True, null=True)),
                ('types_uk', models.TextField(blank=True, null=True)),
                ('types_fr', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Businesses',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, verbose_name='Name')),
                ('code', models.CharField(max_length=3, verbose_name='ISO Code')),
                ('phone_code', models.CharField(default=34, max_length=10, verbose_name='Phone code')),
                ('ls_id', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('date', models.CharField(max_length=100)),
                ('address', models.TextField(blank=True)),
                ('link', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('venue_name', models.CharField(blank=True, max_length=255, null=True)),
                ('venue_rating', models.FloatField(blank=True, null=True)),
                ('venue_reviews', models.IntegerField(blank=True, null=True)),
                ('thumbnail', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('site_types', models.CharField(choices=[('PLACE', 'Place'), ('EVENT', 'Event')], default='PLACE', max_length=20)),
                ('ls_id', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=100)),
                ('key', models.CharField(max_length=100)),
                ('value', models.BooleanField()),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_info', to='automation.business')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('value', models.CharField(max_length=50, unique=True)),
                ('ls_id', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='automation.category')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='automation.level')),
            ],
        ),
        migrations.CreateModel(
            name='BusinessCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='automation.business')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='automation.category')),
            ],
        ),
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, verbose_name='Name')),
                ('cp', models.CharField(blank=True, max_length=12, null=True, verbose_name='CP')),
                ('province', models.CharField(default='Missing province', max_length=100, verbose_name='Province')),
                ('description', models.TextField(default='Missing description', verbose_name='Description')),
                ('link', models.CharField(blank=True, max_length=100, null=True, verbose_name='Link')),
                ('slogan', models.CharField(blank=True, max_length=100, null=True, verbose_name='Slogan')),
                ('latitude', models.DecimalField(decimal_places=27, default=0, max_digits=30, verbose_name='Latitude')),
                ('longitude', models.DecimalField(decimal_places=27, default=0, max_digits=30, verbose_name='Longitude')),
                ('ls_id', models.IntegerField(default=0)),
                ('ambassador', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ambassador_destinations', to=settings.AUTH_USER_MODEL)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destinations', to='automation.country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'Destination',
                'verbose_name_plural': 'Destinations',
            },
        ),
        migrations.AddField(
            model_name='business',
            name='destination',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automation.destination'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='destinations',
            field=models.ManyToManyField(blank=True, to='automation.destination'),
        ),
        migrations.CreateModel(
            name='OpeningHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(max_length=10)),
                ('hours', models.CharField(max_length=50)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opening_hours', to='automation.business')),
            ],
        ),
        migrations.CreateModel(
            name='PopularTimes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('live_busyness_info', models.CharField(blank=True, max_length=50, null=True)),
                ('time_spent', models.CharField(blank=True, max_length=100, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='popular_times', to='automation.business')),
            ],
        ),
        migrations.CreateModel(
            name='HourlyBusyness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.CharField(choices=[('6 AM', '6 AM'), ('7 AM', '7 AM'), ('8 AM', '8 AM'), ('9 AM', '9 AM'), ('10 AM', '10 AM'), ('11 AM', '11 AM'), ('12 PM', '12 PM'), ('1 PM', '1 PM'), ('2 PM', '2 PM'), ('3 PM', '3 PM'), ('4 PM', '4 PM'), ('5 PM', '5 PM'), ('6 PM', '6 PM'), ('7 PM', '7 PM'), ('8 PM', '8 PM'), ('9 PM', '9 PM'), ('10 PM', '10 PM'), ('11 PM', '11 PM')], max_length=5)),
                ('busyness_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('info', models.CharField(blank=True, max_length=100, null=True)),
                ('popular_times', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hourly_data', to='automation.populartimes')),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(max_length=255)),
                ('rating', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('text', models.TextField(blank=True)),
                ('time', models.DateTimeField()),
                ('likes', models.PositiveIntegerField(default=0)),
                ('author_image', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='automation.business')),
            ],
            options={
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='ScrapingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('project_title', models.CharField(blank=True, max_length=300, null=True)),
                ('tailored_category', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('report_url', models.URLField(blank=True, max_length=255, null=True)),
                ('country_name', models.CharField(blank=True, max_length=255, null=True)),
                ('destination_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('QUEUED', 'QUEUED'), ('PENDING', 'PENDING'), ('IN_PROGRESS', 'IN PROGRESS'), ('COMPLETED', 'READY TO REVIEW'), ('FAILED', 'FAILED'), ('DONE', 'REVIEWED'), ('TASK_DONE', 'LIVE ON APP')], default='PENDING', max_length=20)),
                ('translation_status', models.CharField(choices=[('PENDING_TRANSLATION', 'Pending Translation'), ('IN_PROGRESS', 'In Progress'), ('TRANSLATED', 'Translated'), ('PARTIALLY_TRANSLATED', 'Partially Translated'), ('TRANSLATION_FAILED', 'Translation Failed')], default='PENDING_TRANSLATION', max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='scraping_files/')),
                ('is_deleted', models.BooleanField(default=False)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automation.country')),
                ('destination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automation.destination')),
                ('level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='automation.level')),
                ('main_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='automation.category')),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks_sub', to='automation.category')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sites Gathering',
                'verbose_name_plural': 'Sites Gatherings',
            },
        ),
        migrations.AddField(
            model_name='business',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='businesses', to='automation.scrapingtask'),
        ),
        migrations.CreateModel(
            name='TagMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english_tag', models.CharField(max_length=120, unique=True)),
                ('uk_tag', models.CharField(max_length=120, null=True)),
                ('spanish_tag', models.CharField(max_length=120, null=True)),
                ('french_tag', models.CharField(max_length=120, null=True)),
                ('tag_ls_id', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['english_tag'], name='automation__english_57a3a6_idx'), models.Index(fields=['uk_tag'], name='automation__uk_tag_c22866_idx'), models.Index(fields=['spanish_tag'], name='automation__spanish_31331f_idx'), models.Index(fields=['french_tag'], name='automation__french__6d0848_idx'), models.Index(fields=['tag_ls_id'], name='automation__tag_ls__b0306e_idx')],
            },
        ),
        migrations.CreateModel(
            name='TranslationMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.FloatField()),
                ('timestamp', models.DateTimeField()),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='automation.business')),
            ],
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_image_count', models.IntegerField(default=5)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automation.country')),
                ('last_destination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automation.destination')),
                ('last_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='automation.level')),
                ('last_main_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_category_prefs', to='automation.category')),
                ('last_subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategory_prefs', to='automation.category')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('AMBASSADOR', 'Ambassador')], max_length=20)),
                ('destinations', models.ManyToManyField(blank=True, to='automation.destination')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BusinessImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_path', models.CharField(blank=True, max_length=255)),
                ('s3_url', models.URLField(blank=True, max_length=500)),
                ('original_url', models.URLField(max_length=500)),
                ('is_primary', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_images', to='automation.business')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['business', 'is_primary'], name='automation__busines_7673b1_idx')],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Feedback Content')),
                ('status', models.CharField(choices=[('INITIAL', 'Initial'), ('IN_PROGRESS', 'In Progress'), ('DONE', 'Done')], default='INITIAL', max_length=20, verbose_name='Feedback Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='automation.business')),
            ],
            options={
                'indexes': [models.Index(fields=['business'], name='automation__busines_6c6670_idx'), models.Index(fields=['status'], name='automation__status_b85aac_idx')],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField(max_length=500)),
                ('local_path', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.IntegerField(db_index=True, default=0)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='thumbnails/')),
                ('is_approved', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='automation.business')),
            ],
            options={
                'ordering': ['order'],
                'indexes': [models.Index(fields=['business', 'local_path'], name='automation__busines_0b61a0_idx')],
                'unique_together': {('business', 'local_path')},
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['title'], name='automation__title_13caeb_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent', 'title'], name='automation__parent__e292db_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('title', 'parent')},
        ),
        migrations.AddIndex(
            model_name='populartimes',
            index=models.Index(fields=['business', 'day'], name='automation__busines_015b34_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='populartimes',
            unique_together={('business', 'day')},
        ),
        migrations.AddIndex(
            model_name='hourlybusyness',
            index=models.Index(fields=['popular_times', 'time'], name='automation__popular_46c96f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='hourlybusyness',
            unique_together={('popular_times', 'time')},
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['business', '-time'], name='automation__busines_bf2927_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingtask',
            index=models.Index(fields=['status'], name='automation__status_cafa72_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingtask',
            index=models.Index(fields=['created_at'], name='automation__created_211118_idx'),
        ),
        migrations.AddIndex(
            model_name='scrapingtask',
            index=models.Index(fields=['destination'], name='automation__destina_ef33b2_idx'),
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['status'], name='automation__status_d22962_idx'),
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['title'], name='automation__title_036f5c_idx'),
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['scraped_at'], name='automation__scraped_7ff5a0_idx'),
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['form_destination_id'], name='automation__form_de_37a1f7_idx'),
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['main_category'], name='automation__main_ca_137bdf_idx'),
        ),
        migrations.AddIndex(
            model_name='business',
            index=models.Index(fields=['city'], name='automation__city_729e75_idx'),
        ),
        migrations.AddIndex(
            model_name='translationmetrics',
            index=models.Index(fields=['business', 'timestamp'], name='automation__busines_d508a0_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['role'], name='automation__role_1378d3_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['user'], name='automation__user_id_5e0a0a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrole',
            unique_together={('user', 'role')},
        ),
    ]
